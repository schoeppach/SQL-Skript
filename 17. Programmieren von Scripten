use standard
go

-- Programmieren von Scripten

-- ein Script besitzt die Endung .sql es kann manuell ueber den SSMS oder ueber
-- SQL CMD gestartet werden. Aussserdem kann ein Script in Auftraege des Betriebssystem
-- eingebunden werden und durch diese gestartet werden

-- Grundlegender Umgang bei der Arbeit mit Variablen

-- 1. eine Variable muss deklariert werden
-- 2. danach wird die Variabe mit Werten gefuellt 
--			- dazu verwendet man SET oder die SELECT Anweissung in Verbindung mit
--			- Sprachkonstrukten der Sprache TQSL
--					-IF/ELSE, Anweissungsbloecke. WHILE, TRY and CATCH
--					-raiseerror, print, return
-- 3. Anzeigen und Ausgeben des Inhalts der Variablen 
-- eine normale Variable muss nicht Vernichtet werden, da sie nach dem GO im Stapel
-- nicht mehr existiert

-- eine Variable vom Typ Cursor wird deklariert, geoeffnet, mit fetch durchsucht,
-- mit Close geschlossen und mit deallocate vernichtet
-- ein Cursor wird immer dann verwendet, wenn fuer eine Menge von Ergebnissen
-- fuer jede einzelne Teilmenge ein Entscheidung getroffen werden muss
-- Beispiel: Ermitteln aller Daten und Protokolldateien einer Datenbank feststellen
--			der Groesse jeder Datei, und die Datei vekleinern wenn eine kritische 
--			Groesse erreicht wurde

-------

-- Dynamische SQL Anweisungen

-- Beispiel:
-- 1. select spalte, spalte from tabelle where spalte = @wert, GEHT IMMER
-- 2. select @spvar, @spvar from @tabvar where @spvar = @wert; ES WIRD EINE DYNAMISCHE 
--															   ABFRAGE BENOETIGT.

declare @sp1 sysname, @sp2 sysname, @tab sysname, @wert int = 0;
declare @sql varchar(max);
set @sp1 = 'aname';
set @sp2 = 'amenge';
set @tab = 'artikel';
set @wert = 300;

-- Wie es nicht geht

select @sp1 from @tab where @sp2 >= @wert;  -- SO GEHT ES NICHT!!

-- Wie es geht

execute('select ' + @sp1 + ' from ' + @tab + ' where ' + @sp2 + ' >= ' + @wert);

						-- aufpassen auf Leerzeichen!!!!!!!

-- ueberpruefen mit 

declare @sp1 sysname, @sp2 sysname, @tab sysname, @wert int = 0;
declare @sql varchar(max);
set @sp1 = 'aname';
set @sp2 = 'amenge';
set @tab = 'artikel';
set @wert = 300;


set @sql = 'select ' + @sp1 + ' from ' + @tab + ' where ' + @sp2 + ' >= '
					+ cast(@wert as varchar(200));
select @sql;

--oder

exec(@sql);
go
						
--------

-- gespeicherte Systemprozeduren

exec sp_help 'lieferant';
exec sp_help;
go

-- Benutzerdefenierte gespeicherte Prozeduren

-- eine Prozedur kann KEINEN, EINEN oder MEHRERE Parameter uebernehmen
-- im Koerper einer Prozedur koennen mehrere Anweisungen enthalten sein 
-- eine Prozedeur kann weitere Prozeduren aufrufen. 
-- die Verschachtelungsebene sarf 32 nicht ueberschreiten 
-- feststellen in welcher Ebene ich mich befinde mit @@nestlevel

-- gespeicherte Prozeduren koennen auch mit CLR ( Common Language Runtime)
-- erstellt werden, als Assembley im SQL Seerver bekannt gemacht werden
-- und aus dem Assembly mit create procedure.. eine gespeicherte Prozedur erstellen
-- CLR --> .NET farhige Programmierung

-- Vorteile
-- 1. die modulare Programmierung SQL Code wird zu einer Einheit kompiliert
-- 2. die Geschwindigkeit: nach dem ersten Ausfuehren der Prozedur wird der 
--    kompilierte Ausfuehrungsplan in den Prozedurcache abgeleget und jede erneute 
--    Ausfuehrung greift nur noch auf den Prozedurcache zurueck
-- 3. Reduzierung des Netzwerkverkehrs
-- 4. Verwendung als Sicherheitsmechanismus. Werden Informationen aus kritischen
--    Umgebungen (Internet) direkt in die Datenbank gespeichert sollte dazu
--    eine Prozedur zwischengeschaltet werden. Plausibilitaetspruefung

use standard
go 

-- gespeicherte Prozeduren erstellen

create procedure mathe
as
declare @zahl1 float, @zahl2 float, @erg float;
set @zahl1 = 3.896;
set @zahl2 = 12.006;

set @erg = @zahl1 / @zahl2;
print 'Ergebnis:   ' + cast(@erg as varchar(100));
go

-- Prozedur starten

exec mathe;
go

-----------

-- Parameteruebergabe an die Prozedur

create procedure mathe1 @zahl1 float, @zahl2 float
as
declare @erg float;

set @erg = @zahl1 / @zahl2;
print 'Ergebnis:   ' + cast(@erg as varchar(100));
go

exec mathe1 12.88,19.7;
go

-------------

-- Parametervariablen der Prozedeur mit Default - Werten belegen

create procedure mathe2 @zahl1 float = 1, @zahl2 float = 1
as
declare @erg float;

set @erg = @zahl1 / @zahl2;
print 'Ergebnis:   ' + cast(@erg as varchar(100));
go

exec mathe2 12.88,19.7; 

exec mathe2 12.88; 

exec mathe2;

exec mathe2 default, 34.99;

go

-- die Prozedur soll das berechnete Ergebnis an das aufrufende Programm zuruekgeben


create procedure mathe3 @zahl1 float = 1, @zahl2 float = 1, @erg float output
as
set @erg = @zahl1 / @zahl2;
go

-- Aufruf

declare @ergebnis float
exec mathe3 5.88, 2.66, @ergebnis output;
print 'Ergebnis:   ' + cast(@ergebnis as varchar(100));
go

-- Fehlerhafte Parameterwerte verhindern

create procedure mathe4 @zahl1 float = 1, @zahl2 float = 1, @erg float output
as
if @zahl2 = 0
begin
	raiserror('Du sollst nicht teilen durch NULL, du Horst!',10,1);
end;
set @erg = @zahl1 / @zahl2;
go

---

declare @ergebnis float
exec mathe4 5.88, 0, @ergebnis output;
print 'Ergebnis:   ' + cast(@ergebnis as varchar(100));
go

exec mathe 4 13
go

-- Die Prozedur gibt einen Return - Wert zurueck

create procedure mathe5 @zahl1 float = 1, @zahl2 float = 1, @erg float output
as
if @zahl2 = 0
begin
	return 8;
end;
set @erg = @zahl1 / @zahl2;
go

---

declare @ergebnis float, @rw int;
exec @rw = mathe5 5.88, 0, @ergebnis output;
if @rw = 8
raiserror('Du sollst nicht teilen durch NULL, du Horst!',10,1);
else
print 'Ergebnis:   ' + cast(@ergebnis as varchar(100));
go

/*
wir schreiben eine Prozedur welcher eine Farbe eines Artikels uebergeben wird.
Die Prozedur soll mir den Artikelname, Artikelnummer und den Lagerort 
der Artikel mit der angegebenen Farbe anzeigen bzw zurueckgeben.
(Erweiterung: wird keine Farbe übergeben sollen alle Artikel angezeigt werden)
*/

-- einfache Abfrage

select anr, aname, astadt
from artikel 
where farbe = 'rot';
go

-- Prozedur erstellen ( Ergebnis anzeigen)

create procedure farb_art @farbe varchar(10)
as
select anr, aname, astadt
from artikel 
where farbe = @farbe;
go

exec farb_art 'rot';
go

-- das Ergebnis anzeigen und den Übergabe Paramter temporaer stellen

alter procedure farb_art @farbe varchar(10) = null
as
if @farbe is not null
begin
	raiserror('Artikel fuer die Farbe %s.',10,1,@farbe)
	select anr, aname, astadt
	from artikel 
	where farbe = @farbe;
end;

if @farbe is null
begin
	raiserror('Artikel ueber alle Farben.',10,1,@farbe)
	select anr, aname, astadt
	from artikel;	
end;
go

exec farb_art 'blau';
exec farb_art;

-- die Prozedur soll  das Ergebnis an das aufrufende Programm zurueckgeben
-- 1. mit einer permanenten Tabelle

-- Tabelle erstellen

create table art_ergebnis
(Artikelnummer char(3),
Artikelname varchar(300),
Lagerort varchar(200));

-- Tabelle füllen

insert into art_ergebnis exec farb_art 'rot';

-- Tabelle abrufen

select * from art_ergebnis;
go

-- 2. mit einer Tabellenvariablen

declare @erg table (Artikelnummer char(3),
				   Artikelname varchar(300),
				   Lagerort varchar(200));
insert into @erg exec farb_art 'rot';
select * from @erg;
go

------

Uebung 9:

use standard;
go

/*
Schreiben Sie eine Prozedur "obj_anz" der optional ein Datenbankobjektname- Bezeichener
übergeben wird.
Gültige Bezeichener (Objektnamen) sind : Tabelle, Sicht, Prozedur.
Wird der Prozedur kein Bezeichner übergeben soll die Prozedur die Anzahl 
der Tabellen, der Sichten und der Prozeduren anzeigen.
Wird ein Bezeichner übergeben soll nur die Anzahl des angegebenen Bezeichners
angezeigt werden.

Verwenden für die Anzeige eine Tabellenvariable.
Die Angaben zu den Objekten finden Sie in der Systemsicht sys.objects und
nähere Infos in der Spalte Type.
*/

create procedure obj_anz @bezeichner varchar(200) = null
as
if @bezeichner is not null 
   and @bezeichner not in('tabelle','sicht','prozedur')
  begin
  raiserror('Folgende Parameterwerte sind zulässig: Tabelle; Sicht; Prozedur.',10,1);
  return;
  end
declare @ausgabe table(Objekttyp nvarchar(50), Anzahl int); 

if @bezeichner is null
  begin
	select case when type = 'u' then 'Tabellen'
						when type = 'v' then 'Sichten'
						when type = 'p' then 'Prozeduren'
						end as [Objekttyp], isnull(COUNT(*),0) as [Anzahl]
	from sys.objects
	where type in('u','v','p') and name not like 'sys_%'
	and name not like 'sp_%' and name not like 'fn_%'
	group by type;
  end;

if @bezeichner is not null
begin
if @bezeichner = 'sicht'
  begin
	insert into @ausgabe values('Sichten',
					(select count(*) from sys.objects where type = 'v'));
	select * from @ausgabe;
  end;
if @bezeichner = 'tabelle'
  begin
	insert into @ausgabe values('Tabellen',
					(select count(*) from sys.objects where type = 'u'
									  and name not like 'sys_%'));
	select * from @ausgabe;
  end;
if @bezeichner = 'prozedur'
  begin
	insert into @ausgabe values('Prozeduren',
					(select count(*) from sys.objects where type = 'p'
									  and name not like 'sp_%'));
	select * from @ausgabe;
  end;

end;
go

--------

exec obj_anz;
exec obj_anz 'Sicht';
