-- Vorbereitung Datenbank Standard erstellen

use master
go

-- eventuell vorhandene Datenbankspezifische benutzerdefinierte
-- Fehlermeldungen entfernen

if exists(select * from sys.messages where message_id = 50100)
	execute sp_dropmessage '50100', 'all';
go

-- eventuell vorhandene Datenbank "Standard" loeschen


if exists(select * from sys.databases where database_id = db_id('Standard'))
	drop database Standard;
go

-- benutzerdefinierte Fehlermeldung erstellen

sp_addmessage 50100,16,'The delivery of supplier %s of %s, was deleted from the User %s on %s.', 'us_english', 'true';
go
sp_addmessage 50100,16,'Die Lieferung von Lieferant %1! vom %2!, wurde von User %3! am %4! geloescht', 'German', 'true';
go

-- neue Datenbank "Standard" erstellen

create database standard;
/*
on (name = 'Standard',
    filename = 'f:\standard.mdf',
    size = 5MB,
    maxsize = 10MB)
log on (name = 'Standard_Prot',
    filename = 'f:\standard_prot.ldf',
    size = 2MB,
    maxsize = 3MB)
*/
go

use standard;
go


-- Schemas erstellen
 
-- create schema verwaltung authorization dbo;
go
-- create schema einkauf authorization dbo;
go
 


-- Tabellen erstellen

create table dbo.artikel
	(
	anr nchar(3) NOT NULL constraint anr_ps primary key 
	constraint anr_chk check(anr like 'a%' and cast(substring(anr,2,2)as int) between 1 and 99),
	aname nvarchar(50) NOT NULL ,
	farbe nchar (7) NULL constraint farbe_chk check( farbe in ('rot', 'blau', 'gr�n', 'schwarz', 'gelb')),
	gewicht decimal(9,2) NULL ,
	astadt nvarchar(50) NULL ,
	amenge int NULL constraint amenge_chk check( amenge between 0 and 10000));
go


create table dbo.lieferant
	(
	lnr nchar(3) NOT NULL constraint lnr_ps primary key 
	constraint lnr_chk check(lnr like 'l%' and cast(substring(lnr,2,2)as int) between 1 and 99),
	lname nvarchar(50) NOT NULL constraint lname_chk check( lname like '[A-Z]%'),
	status int NULL constraint status_chk check( status between 1 and 99),
	lstadt nvarchar(50) NULL constraint lstadt_chk check( lstadt like '[A-Z]%'));
go


create table dbo.lieferung
	(
	lnr nchar(3) NOT NULL constraint lnr_fs references dbo.lieferant(lnr)
			     on update cascade,
	anr nchar(3) NOT NULL constraint anr_fs references dbo.artikel(anr)
			     on update cascade,
	lmenge int NOT NULL constraint lmenge_chk check( lmenge between 1 and 1000000) ,
	ldatum datetime NOT NULL,
	constraint lief_ps primary key(lnr, anr, ldatum));
go


use standard;
go

-- Tabellen mit Anfangsdaten f�llen
-- Tabelle Lieferant

insert into dbo.lieferant values('L01', 'Schmidt', 20, 'Hamburg');
insert into dbo.lieferant values('L02', 'Jonas', 10, 'Ludwigshafen');
insert into dbo.lieferant values('L03', 'Blank', 30, 'Ludwigshafen');
insert into dbo.lieferant values('L04', 'Clark', 20, 'Hamburg');
insert into dbo.lieferant values('L05', 'Adam', 30, 'Aachen');


-- Tabelle Artikel

insert into dbo.artikel values('A01', 'Mutter', 'rot', 12, 'Hamburg', 800);
insert into dbo.artikel values('A02', 'Bolzen', 'gr�n', 17, 'Ludwigshafen', 1200);
insert into dbo.artikel values('A03', 'Schraube', 'blau', 17, 'Mannheim', 400);
insert into dbo.artikel values('A04', 'Schraube', 'rot', 14, 'Hamburg', 900);
insert into dbo.artikel values('A05', 'Nockenwelle', 'blau', 12, 'Ludwigshafen', 1300);
insert into dbo.artikel values('A06', 'Zahnrad', 'rot', 19, 'Hamburg', 500);


-- Tabelle Lieferung

insert into dbo.lieferung values('L01', 'A01', 300, '18.05.90');
insert into dbo.lieferung values('L01', 'A02', 200, '13.07.90');
insert into dbo.lieferung values('L01', 'A03', 400, '01.01.90');
insert into dbo.lieferung values('L01', 'A04', 200, '25.07.90');
insert into dbo.lieferung values('L01', 'A05', 100, '01.08.90');
insert into dbo.lieferung values('L01', 'A06', 100, '23.07.90');
insert into dbo.lieferung values('L02', 'A01', 300, '02.08.90');
insert into dbo.lieferung values('L02', 'A02', 400, '05.08.90');
insert into dbo.lieferung values('L03', 'A02', 200, '06.08.90');
insert into dbo.lieferung values('L04', 'A02', 200, '09.08.90');
insert into dbo.lieferung values('L04', 'A04', 300, '20.08.90');
insert into dbo.lieferung values('L04', 'A05', 400, '21.08.90');
go


-- Sicherstellen von Geschaeftsregeln
-- Addieren der Liefermenge zur entsprechenden Lagermenge bei neuer Lieferung

-- create trigger menge_lief_neu
-- on einkauf.lieferung
-- for insert
-- as
-- if (select inserted.lmenge from inserted ) > 0
--	begin
--	 update verwaltung.artikel
--	 set amenge = amenge + inserted.lmenge
--	 from verwaltung.artikel join inserted on artikel.anr = inserted.anr;
--	end;
go

-- Subtrahieren der Liefermenge vom der entsprechenden Lagermenge
-- beim Loeschen einer oder mehrerer Lieferungen

-- create trigger lief_l�sch
-- on einkauf.lieferung
-- for delete
-- as
-- update verwaltung.artikel
-- set amenge = amenge - deleted.lmenge
-- from verwaltung.artikel join deleted on artikel.anr = deleted.anr;
go


-- aendern der Lagermenge des entsprechenden Artikels bei aenderung
-- der Liefermenge einer vorhandenen Lieferung

-- create trigger menge_lief_aendern
-- on einkauf.lieferung
-- for update
-- as
-- if update(lmenge)
--   begin
--	update verwaltung.artikel
--	set amenge = amenge + inserted.lmenge - deleted.lmenge
--	from verwaltung.artikel join inserted on artikel.anr = inserted.anr
--	join deleted on artikel.anr = deleted.anr;
--    end;
go


-- aendern der Lagermenge wenn die Artikelnummer einer
-- Lieferung geaendert wird

-- create trigger anummer_lief_aendern
-- on einkauf.lieferung
-- for update
-- as
-- if update(anr)
--   begin
--	update verwaltung.artikel
--	set amenge = amenge - deleted.lmenge
--	from verwaltung.artikel join deleted on artikel.anr = deleted.anr

--	update verwaltung.artikel
--	set amenge = amenge + inserted.lmenge
--	from verwaltung.artikel join inserted on artikel.anr = inserted.anr;
--    end;
go


---------------------------------------------------------------------
TAG 1:

use standard;
go

-- Select ohne Datenquellen

select getdate()                            -- aktuelles Datum

select 5 * 20;

-- Select mit Datenquellen

-- alle Angaben zu allen Lieferanten

select *from lieferant;

-- Der Stern sollte nur fuer Testabfragen verwendet werden
-- Programmierer verwenden die Spaltennamen.

select lnr, lname, status, lstadt
from lieferant;

-- vollqualifierter Name

select lnr, lname, status, lstadt
from sql16serv1.standard.dbo.lieferant;

-- Aus der DB Standard heraus soll die Tabelle Person in Person der DB
-- AdventureWorks2012 abgefragt werden. Dabei soll Datenbankkontex des
-- aufrufenden Stapels nicht geaendert (use...) werden.

select *
from AdventureWorks2012.person.person;


-- ausgewaehlte Spaltenwerte
-- Wohnorte und Namen aller Lieferanten

select lstadt, lname
from lieferant

-- ausgewaehlte Datensaetze
-- dafuer wird die Where - Klausel benoetigt

-- Vergleichsoperatoren

-- Nummern, Namen und Farbe der Artikel die in Hamburg lagern

select anr, aname, farbe from artikel
where astadt = 'Hamburg';

-- Alle Lieferungen nach dem 01.08.90

select * from lieferung
where ldatum > '01.08.1990';

select * from lieferung
where ldatum > '1990-08-01';

-- Alle Lieferungen mit einer Liefermenge von 200 Stueck

select * from lieferung
where lmenge = 200;

-- Bereiche angeben

-- mit between koennen Bereiche definiert werden, Die angegebene Grenzen
-- (von-bis) sind einschliesslich

-- Alle Lieferungen zwischen dem 20.07.90 und dem 18.08.90

select *
from lieferung
where ldatum between '20.07.90' and '18.08.90';

select * from lieferung
where ldatum >= '20.07.90' and ldatum <= '18.08.90';

-- Alle Liefrungen die nicht zwischen dem 20.07.90 und dem 18.08.90
-- geliefert wurden

select *
from lieferung
where ldatum not between '20.07.90' and '18.08.90';

-- between wird hauptsaechlich auf numerische- und Datumsdatentypen
-- angewendet.

-- Alle Lieferanten deren Namen mit dem Buchstaben B bis J beginnen

select * from lieferant
where lname between 'B' and 'J';

-- Jonas wird nicht angezeigt. Warum?

select * from lieferant
where lname between 'B' and 'Jz';

-- Dafuer verwendet man like

------
-- Listen

-- Alle Lieferanten die in Hamburg oder in Aachen wohnen

select * from lieferant
where lstadt = 'Hamburg', 'Aachen'              -- geht nicht

select * from lieferant
where lstadt in('Hamburg', 'Aachen');

select * from lieferant
where lstadt = 'Hamburg' or lstadt = 'Aachen';

-- Alle Lieferanten die nicht in Hamburg oder in Aachen wohnen

select * from lieferant
where lstadt not in('Hamburg', 'Aachen');

------

-- neuen Lieferanten aufnehmen.

insert into lieferant values('L10','Schul%ze',null, null);

select * from lieferant;

-- LIKE Operator

-- kann nur auf alfanummerische Zeichen angewendet werden.
-- verwendet PLatzhalter (Jokerzeichen)

-- Alle Lieferanten die an einem Ort wohnen der mit dem Buchstaben L beginnt.

select * from lieferant
where lstadt like 'L%';

-- Alle Lieferanten deren Namen an zweiter Stelle den Buchstaben L haben.

select * from lieferant
where lname like '_L%';

-- Alle Lieferanten deren Namen an zweiter Stelle den Buchstaben L haben und
-- an vorletzter Stelle den Buchstaben R.

select * from lieferant
where lname like '_L%R_';

insert into lieferant values('L11','Jach',null, null);

insert into lieferant values('L12','Kulesch',null, null);

-- Lieferanten deren Namen mit dem Buchstaben B bis J beginnen

select * from lieferant
where lname like '[B-J]%';

select * from lieferant
where lname like '[BJ]%';

--Alle Lieferanten in deren Namen an keiner Stelle ein A steht

select * from lieferant
where lname like '%[^a]%';                --GGA ---> Katzenklo    

-- besser

select * from lieferant
where lname not like '%a%';

-- Gesucht sind die Lieferanten in deren Namen ein % - Zeichen steht

select * from lieferant
where lname like '%%%';                 --- ???????????

-- Da % ein Platzhalter ist, muss man mit einer Maske arbeiten.

select * from lieferant
where lname like '%y%%' escape 'y';

------

-- Alle Lieferanten deren Wohnort nicht bekannt ist

select * from lieferant
where lstadt = null;                    -- kein Fehler, sondern eine leere Menge
                                        -- jeder Vergleich mit Unbekannt ergibt
                                        -- Unbekannt

insert into lieferant values('L13','Schoeppach','99','Erfurt');

select * from lieferant;

-- Alle Lieferanten ohne Statuswert sollen mit einem Angenommenen Status von 50 
-- angezeigt werden

select lnr, lname, isnull(status,50) as [status], lstadt
from lieferant;

------

-- Arbeit mit mehreren Bedingungen in der WHERE - Klausel

select * from artikel
where gewicht > 15 and astadt like '[E-L]%'or amenge > 700;

select * from artikel
where gewicht > 15 and(astadt like '[E-L]%'or amenge > 700);

Uebung 1:

1.

-- schreiben die 3 Abfragen 
-- (Vergleichsoperatoren und Schluesselwoerter "between" und "in")
-- die alle Lieferungen vom 5. bzw 6. August 1990 ausgeben

select *
from lieferung
where ldatum between '05.08.1990' and '06.08.1990'

select * 
from lieferung
where ldatum in ('05.08.1990', '06.08.1990')

select * 
from lieferung
where ldatum >= '05.08.1990' and ldatum <= '06.08.1990';

2.

-- schreiben sie eine Abfrage, die die Nummern und Namen aller roten
-- oder blauen Artikel aus Hamburg ausgibt sowie die Artikel die eine 
-- Lagermenge zwischen 900 und 1500 Stueck haben und in deren 
-- Name ein "a" vorkommt

select  anr, aname from artikel
where Farbe in('rot','blau') and astadt ='Hamburg' or 
amenge between 900 and 1500 and aname like '%a%';

3.

-- schreiben sie eine Abfrage, die alle Lieferanten ausgibt, deren 
-- Namen mit einem Buchstaben zwischen A und G beginnt

select * from lieferant
where lname between 'A' and 'G';

select * from lieferant
where lname like '[a-g]%';

4.

-- schreiben sie eine Abfrage, die alle Lieferanten ausgibt, deren Namen
-- mit "S", "C" oder "B" beginnen und wo der dritte Buchstabe im Namen
-- ein "a" ist, die aber in einem Ort wohnen in dessen
-- Namen die Zeichenfolge "ried" nicht vorkommt

select * from lieferant
where lname like '[BCS]_a%_' and lstadt not like 'ried%';

-	Ueberpruefen mit

insert into lieferant values('L20', 'Braun', 5, 'Riednordhausen');
go

5.

-- schreiben sie eine Abfrage zur Ausgabe aller Artikel
-- es sollen jedoch nur die Artikel ausgegeben werden, deren Gewicht 
-- null Gramm betraegt oder unbekannt ist

select * from artikel
where gewicht = 0 or gewicht is null;

select * from artikel

insert into artikel values('A11', 'Kurwa', 'rot', null, 'Riednordhausen', 100)

insert into artikel values('A12', 'Lauch', 'blau', 0, 'Mittelried', 1200)
